# FizzBuzz
# Напишите программу, которая печатает цифры
# от 1 до 100, но вместо чисел, кратных 3 пишет
# Fizz, вместо чисел кратный 5 пишет Buzz, а вместо
# чисел одновременно кратных и 3 и 5 - FizzBuzz
for i in range(1, 101):
    if not i % 3 and not i % 5:
        print('FizzBuzz')
        continue
    if not i % 3:
        print('Fizz')
        continue
    if not i % 5:
        print('Buzz')
        continue
    print(i)


# List practice
# Используйте генератор списков чтобы получить следующий:
# ['ab', 'ac', 'ad', 'bb', 'bc', 'bd'].
# Используйте на предыдущий список slice чтобы получить следующий:
# ['ab', 'ad', 'bc'].
# Используйте генератор списков чтобы получить следующий
# ['1a', '2a', '3a', '4a'].
# Одной строкой удалите элемент  '2a' из прошлого списка и напечатайте его.
x = ['a', 'b']
z = ['b', 'c', 'd']
y = [i + k for i in x for k in z]
print(y)
print(y[::2])
print([str(i) + 'a' for i in range(1, 5)])


# Tuple practice
# Создайте список ['a', 'b', 'c'] и сделайте из него кортеж.
# Создайте кортеж ('a', 'b', 'c'), И сделайте из него список
# Сделайте следующие присвоения одной строкой a = 'a', b=2, c=’python’.
# Создайте кортеж из одного элемента, чтобы при итерировании по этому
# элементы последовательно выводились значения 1, 2, 3.
# Убедитесь что len() исходного кортежа возвращает 1.
list_ = ['a', 'b', 'c']
tuple_ = tuple(list_)
print(tuple_)
new_list = list(tuple_)
print(new_list)
a, b, c = 'a', 2, 'python'
print(a, b, c)
new_tuple = ([1, 2, 3],)
for i in new_tuple[0]:
    print(i)
print(len(new_tuple))


# Пары элементов
# Дан список чисел. Посчитайте, сколько в нем
# пар элементов, равных друг другу.
# Считается, что любые два элемента, равные друг-
# другу образуют одну пару, которую необходимо посчитать.
# Входные данные - строка из чисел, разделенная пробелами.
# Выходные данные - количество пар.
# Важно: 1 1 1 - это 3 пары, 1 1 1 1 - это 6 пар
list_ = [1, 2, 2, 2, 4, 5, 664]
new_list = []
pars = 0
for i in list_:
    if i in new_list:
        pars += 1
    if i not in new_list:
        new_list.append(i)
print(pars)


# Уникальные элементы в списке
# Дан список. Выведите те его элементы,
# которые встречаются в списке только один раз.
# Элементы нужно выводить в том порядке,
# в котором они встречаются в списке.
x = ['s', 's', 'l', 'l', 'p', 1, 2]
for i in x:
    if x.count(i) == 1:
        print(i)
y = [i for i in x if x.count(i) == 1]
print(y)


# Упорядоченный список.
# Дан список целых чисел. Требуется переместить
# все ненулевые элементы в левую часть списка,
# не меняя их порядок, а все нули - в правую часть.
# Порядок ненулевых элементов изменять нельзя,
# дополнительный список использовать нельзя,
# задачу нужно выполнить за один проход по списку.
# Распечатайте полученный список.
# Вышестоящие задачи - для оценки до 9.5 баллов
def is_zero(i):
    return not i


x = [1, 0, 2, 0, 0, 0, 3, 4, 5, 6, 0, 2552]
x.sort(key=is_zero)
print(x)


# Шоколадка **
# Определения:
# Шоколадка - прямоугольник, размером n×m (n, m - натуральные).
# Разлом - деление шоколадки на две части с натуральными размерами по прямой.
# Долька - элемент шоколадки размером 1х1. 
# Очевидно шоколадка состоит из n*m долек.
# Кусок - элемент шоколадки произвольного (целочисленного размера).
# Определите, можно ли одним разломом отделить от шоколадки 
# кусок площадью ровно k.
# Определите, можно ли отломить от шоколадки ровно k долек
# за некоторое количество разломов.
# Определите, можно ли отломить от шоколадки ровно k долек с помощью t разломов
# Описание решения поместите в docstring
length = 10
width = 9
list_ = [width * i for i in range(1, length + 1)]
list_2 = [length * i for i in range(1, width + 1)]
k = int(input())
if length * width < k:
    print(False)
print(k in list_ or k in list_2)
